=================================
Aggregation Expression Operations
=================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to construct expressions 
for use in the aggregation pipeline. 
With the {+driver-short+}, you can perform expression operations with
discoverable, typesafe Java methods rather than BSON documents.
Because these methods follow the fluent interface pattern, you can chain 
aggregation operations together to create code that is both more compact and 
more naturally readable.  

.. tip:: 

   For more information about aggregation expressions that use the Query API, see the 
   :manual:`Aggregation Pipeline Operators </reference/operator/aggregation/>` 
   page in the Server manual.

Operations
----------

Date Operations
~~~~~~~~~~~~~~~

You can perform a date operation using the methods described in this
section. Date operations either work on values of type ``MqlDate`` or
return ``MqlDate`` values.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Java Method
     - Aggregation Pipeline Operator

   * - `asString() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlDate.html#asString(com.mongodb.client.model.mql.MqlString,com.mongodb.client.model.mql.MqlString)>`__
     - :manual:`$dateToString </reference/operator/aggregation/dateToString/>`

   * - `millisecondsAsDate() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlInteger.html#millisecondsAsDate()>`__
     - :manual:`$toDate </reference/operator/aggregation/toDate/>`     

   * - `parseDate() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlString.html#parseDate()>`__
     - :manual:`$dateFromString </reference/operator/aggregation/dateFromString/>`

   * - `dayOfWeek() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlDate.html#dayOfWeek(com.mongodb.client.model.mql.MqlString)>`__
     - :manual:`$dayOfWeek </reference/operator/aggregation/dayOfWeek/>`

   * - `dayOfMonth() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlDate.html#dayOfMonth(com.mongodb.client.model.mql.MqlString)>`__
     - :manual:`$dayOfMonth </reference/operator/aggregation/dayOfMonth/>`

   * - `dayOfYear() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlDate.html#dayOfYear(com.mongodb.client.model.mql.MqlString)>`__
     - :manual:`$dayOfYear </reference/operator/aggregation/dayOfYear/>`

   * - `year() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlDate.html#year(com.mongodb.client.model.mql.MqlString)>`__
     - :manual:`$year </reference/operator/aggregation/year/>`

   * - `month() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlDate.html#month(com.mongodb.client.model.mql.MqlString)>`__
     - :manual:`$month </reference/operator/aggregation/month/>`
   
   * - `week() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlDate.html#week(com.mongodb.client.model.mql.MqlString)>`__
     - :manual:`$week </reference/operator/aggregation/week/>`

   * - `hour() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlDate.html#hour(com.mongodb.client.model.mql.MqlString)>`__
     - :manual:`$hour </reference/operator/aggregation/hour/>`

   * - `minute() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlDate.html#minute(com.mongodb.client.model.mql.MqlString)>`__
     - :manual:`$minute </reference/operator/aggregation/minute/>`

   * - `second() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlDate.html#second(com.mongodb.client.model.mql.MqlString)>`__
     - :manual:`$second </reference/operator/aggregation/second/>`

   * - `millisecond() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlDate.html#millisecond(com.mongodb.client.model.mql.MqlString)>`__
     - :manual:`$millisecond </reference/operator/aggregation/millisecond/>`

.. include:: /includes/fundamentals/agg-mql-diff.rst

Suppose you have some UTC time series data and need to
match events that occurred on any Monday in 2018.

To get the year from the ``date`` field, use the ``year()`` method, and to
check if the year is ``2018``, use the ``eq()`` method. To get the day of
the week (as a number), use the ``dayOfWeek()`` method, and to check if
the day is Monday, corresponding to ``2``, use the ``eq()`` method.

The following code shows the pipeline stage for this aggregation:

.. code-block:: java
   :copyable: true

   Arrays.asList(match(
           expr(current()
                   .getDate("date")
                   .year(of("UTC"))
                   .eq(of(2018))
                   .and(current()
                           .getDate("date")
                           .dayOfWeek(of("UTC"))
                           .eq(of(2))))
   ));
         
The following code provides an equivalent aggregation pipeline in
the Query API:
   
.. code-block:: javascript
   :copyable: true

   [
     { $match: {
         $expr: {
           $and: [
             { $eq: [ { $year: { date: "$date",
                                 timezone: "UTC" } }, 2018 ] },
             { $eq: [ { $dayOfWeek: { date: "$date",
                                      timezone: "UTC" } }, 2 ] },
           ] } }
     }
   ]

More Information
----------------
